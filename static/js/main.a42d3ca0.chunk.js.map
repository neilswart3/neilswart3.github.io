{"version":3,"sources":["components/Footer/styles.ts","components/Footer/index.ts","components/Footer/Footer.tsx","components/Header/NavItem/styles.ts","components/Header/NavItem/index.ts","components/Header/NavItem/NavItem.tsx","components/Header/styles.ts","components/Header/Header.tsx","components/Header/index.ts","layouts/GeneralLayout/styles.ts","layouts/GeneralLayout/index.ts","layouts/GeneralLayout/GeneralLayout.tsx","App/index.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Styled","Footer","styled","div","NavItem","NavButton","Button","props","delay","children","animator","duration","enter","Header","Title","Text","ArText","NavItems","navItems","about","title","skills","projects","contact","as","Object","entries","map","i","key","href","GeneralLayout","Main","main","LayoutContent","FrameHexagon","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","styles","body","fontFamily","height","button","margin","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a42d3ca0.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nconst Footer = styled.div`\n  padding: 1rem 0;\n`\n\nconst Styled = { Footer }\n\nexport default Styled\n","import Footer from './Footer'\n\nexport default Footer\n","import React from 'react'\nimport Styled from './styles'\n\nconst Footer: React.FC = () => {\n  return <Styled.Footer>&nbsp;</Styled.Footer>\n}\n\nexport default Footer\n","import { Button } from '@arwes/core'\nimport styled from '@emotion/styled'\n\nconst NavItem = styled.div`\n  margin: 0;\n`\n\nconst NavButton = styled(Button)`\n  margin: 0;\n`\n\nconst Styled = { NavItem, NavButton }\n\nexport default Styled\n","import NavItem from './NavItem'\n\nexport default NavItem\n","import React from 'react'\nimport { AnimatorGeneralProvider } from '@arwes/animation'\nimport { Text } from '@arwes/core'\nimport Styled from './styles'\n\ninterface NavItemProps {\n  href: string\n  delay: number\n  children: React.ReactNode\n}\n\nconst NavItem: React.FC<NavItemProps> = (props: NavItemProps) => {\n  const { delay, children } = props\n\n  return (\n    <AnimatorGeneralProvider animator={{ duration: { enter: 200, delay } }}>\n      <Styled.NavButton>\n        <Text>{children}</Text>\n      </Styled.NavButton>\n    </AnimatorGeneralProvider>\n  )\n}\n\nexport default NavItem\n","import { Text as ArText } from '@arwes/core'\nimport styled from '@emotion/styled'\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 0;\n`\n\nconst Title = styled.div`\n  display: block;\n`\n\nconst Text = styled(ArText)`\n  margin: 0;\n`\n\nconst NavItems = styled.div`\n  display: flex;\n  gap: 1rem;\n  justify-content: flex-end;\n  align-items: center;\n`\n\nconst Styled = { Header, Title, Text, NavItems }\n\nexport default Styled\n","import React from 'react'\nimport { FrameLines } from '@arwes/core'\nimport NavItem from './NavItem'\nimport Styled from './styles'\n\ninterface NavItems {\n  [key: string]: {\n    title: string\n  }\n}\n\nconst navItems: NavItems = {\n  about: {\n    title: 'About',\n  },\n  skills: {\n    title: 'Skills',\n  },\n  projects: {\n    title: 'Projects',\n  },\n  contact: {\n    title: 'Contact',\n  },\n}\n\nconst delay = 200\n\nconst Header: React.FC = () => {\n  return (\n    <Styled.Header>\n      <Styled.Title>\n        <FrameLines>\n          <Styled.Text as='h2'>neilswart3</Styled.Text>\n        </FrameLines>\n      </Styled.Title>\n      <Styled.NavItems>\n        {Object.entries(navItems).map(([key, { title }], i) => (\n          <NavItem href={`/${key}`} delay={delay * (i + 1)}>\n            {title}\n          </NavItem>\n        ))}\n      </Styled.NavItems>\n    </Styled.Header>\n  )\n}\n\nexport default Header\n","import Header from './Header'\n\nexport default Header\n","import { FrameHexagon } from '@arwes/core'\nimport styled from '@emotion/styled'\n\nconst GeneralLayout = styled.div`\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n  width: 96%;\n  margin: 0 auto;\n`\n\nconst Main = styled.main`\n  width: 100%;\n`\n\nconst LayoutContent = styled(FrameHexagon)`\n  height: 100%;\n`\n\nconst Styled = { GeneralLayout, Main, LayoutContent }\n\nexport default Styled\n","import GeneralLayout from './GeneralLayout'\n\nexport default GeneralLayout\n","import React from 'react'\nimport { Footer, Header } from 'src/components'\nimport Styled from './styles'\n\ninterface GeneralLayoutProps {\n  children: React.ReactNode\n}\n\nconst GeneralLayout: React.FC<GeneralLayoutProps> = (\n  props: GeneralLayoutProps\n) => {\n  const { children } = props\n\n  return (\n    <Styled.GeneralLayout>\n      <Header />\n      <Styled.LayoutContent>\n        <Styled.Main>{children}</Styled.Main>\n      </Styled.LayoutContent>\n      <Footer />\n    </Styled.GeneralLayout>\n  )\n}\n\nexport default GeneralLayout\n","import React from 'react'\nimport { GeneralLayout } from 'src/layouts'\n\nfunction App() {\n  return <GeneralLayout>test</GeneralLayout>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ArwesThemeProvider, StylesBaseline } from '@arwes/core'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nconst ROOT_FONT_FAMILY = '\"Titillium Web\", sans-serif'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ArwesThemeProvider>\n      <StylesBaseline\n        styles={{\n          body: { fontFamily: ROOT_FONT_FAMILY, height: '100vh' },\n          button: { margin: '0 20px 20px 0' },\n        }}\n      />\n      <App />\n    </ArwesThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}